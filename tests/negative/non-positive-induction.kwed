inductive False: Type {}

inductive Eq(A: Type, x: A): A → Type {
	refl: Eq A x x,
}

def Eq.congrue(A B: Type, f: A → B, x y: A, p: Eq A x y): Eq B (f x) (f y) {
    match p to [y* -] Eq B (f x) (f y*) {
        refl => Eq.refl B (f x),
    }
}

inductive ℕ: Type {
    0: ℕ,
    suc: ℕ → ℕ,
}

// --------------------------------------------------------
// HoTT Ex. 5.7

struct Problem-v0: Type {
     is-empty: Problem-v0 → False,
}

def Problem-v0-is-empty(p: Problem-v0): False {
    Problem-v0.is-empty p p
}

def Problem-v0-is-inhabited: Problem-v0 {
    Problem-v0.make ( is-empty: Problem-v0-is-empty )
}

def contradiction: False {
    Problem-v0-is-empty Problem-v0-is-inhabited
}

// inductive Problem: Type {
//     make-problem: (Problem → Problem) → Problem,
// }


