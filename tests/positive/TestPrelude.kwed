notation number-0 { ℕ.0 }
notation number-suc { ℕ.suc }

// Equality
inductive Eq(A: Type, x: A): (y: A) → Type {
    refl: Eq A x x,
}

// Congruence of equality: any function may be applied to both sides of an equation
def Eq.congrue(A B: Type, f: A → B, x y: A, p: Eq A x y): Eq B (f x) (f y) {
    match p to [y -] Eq B (f x) (f y) {
        refl => Eq.refl B (f x)
    }
}

// Transitivity of equality: if x=y and y=z, then x=z
def Eq.compose(A: Type, x y z: A, p: Eq A x y, q: Eq A y z): Eq A x z {
    match q to [z -] Eq A x z {
        refl => p,
    }
}

// Symmetry of equality: if x=y, the y=x
def Eq.commute(A: Type, x y: A, p: Eq A x y): Eq A y x {
    match p to [y -] Eq A y x {
        refl => Eq.refl A x,
    }
}

inductive ℕ: Type 0 {
	0: ℕ,
	suc: ℕ → ℕ,
}

def +(n m: ℕ): ℕ {
	match m to [-] ℕ {
		0 => n,
		suc m' => ℕ.suc (rec m'),
	}
}

inductive Unit: Type {
    0: Unit,
}
