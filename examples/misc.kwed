notation number-0 { ℕ.0 }
notation number-suc { ℕ.suc }

inductive Eq(A: Type, x: A): A → Type {
	refl: Eq A x x,
}

inductive ℕ: Type 0 {
	0: ℕ,
	suc: ℕ → ℕ,
}

def +(n m: ℕ): ℕ {
	match m to [-] ℕ {
		0 => n,
		suc m' => ℕ.suc (rec m'),
	}
}

def 10+14=24: Eq ℕ (+ 10 14) 24 { Eq.refl ℕ 24 }

inductive Vec(A: Type): ℕ → Type {
	nil: Vec A 0,
	cons: (n: ℕ, Vec A n, A) → Vec A (ℕ.suc n),
}

def Vec.prepend(A: Type, n: ℕ, v: Vec A n, a: A): Vec A (ℕ.suc n) {
	match v to [n v] Vec A (ℕ.suc n) {
		nil => Vec.cons A 0 (Vec.nil A) a,
		cons n' v' a' => Vec.cons A (ℕ.suc n') (rec v') a',
	}
}

def just_1: Vec ℕ 1 {
	Vec.cons ℕ 0 (Vec.nil ℕ) 1
}

def just_2: Vec ℕ 1 {
	Vec.cons ℕ 0 (Vec.nil ℕ) 2
}

def just_1_2: Vec ℕ 2 {
	Vec.cons ℕ 1 just_1 2
}

def just_1_2=prepend_1_just_2: Eq (Vec ℕ 2) just_1_2 (Vec.prepend ℕ 1 just_2 1) {
	Eq.refl (Vec ℕ 2) just_1_2
}
