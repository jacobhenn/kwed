notation number_0 { ℕ.0 }
notation number_suc { ℕ.suc }

inductive =(A: Type, x: A): A → Type
{
	refl: = A x x,
}

def =.cong(A B: Type, f: A → B, x y: A, x=y: = A x y): = B (f x) (f y)
{
	=.elim A x ([y: A, x=y: = A x y] = B (f x) (f y)) (=.refl B (f x)) y x=y
}

def =.transport(A: Type, F: A → Type, x y: A, x=y: = A x y): (F x) → (F y)
{
	=.elim A x ([y: A, x=y: = A x y] (F x) → (F y)) ([z: F x] z) y x=y
}

inductive False: Type {}

inductive Unit: Type
{
	0: Unit,
}

inductive Product(A: Type, F: A → Type): Type
{
	pair: (a: A, F a) → Product A F,
}

inductive ℕ: Type
{
	0: ℕ,
	suc: ℕ → ℕ,
}

def ℕ.pred: ℕ → ℕ
{
	ℕ.elim
		([_: ℕ] ℕ)
		0
		([x' _: ℕ] x')
}

def ℕ.+(x: ℕ, y: ℕ): ℕ
{
	ℕ.elim
		([_: ℕ] ℕ)
		x
		([y': ℕ, y'_rec: ℕ] ℕ.suc y'_rec)
		y
}

def ℕ.=0: ℕ → Type
{
	ℕ.elim ([_: ℕ] Type) Unit ([_: ℕ, _: Type] False)
}

def 0≠1(0=1: = ℕ 0 1): False
{
	=.transport ℕ ℕ.=0 0 1 0=1 Unit.0
}

def 2≠3(2=3: = ℕ 2 3): False
{
	0≠1 (=.cong ℕ ℕ ([x: ℕ] ℕ.pred (ℕ.pred x)) 2 3 2=3)
}

def 1+1≠3(1+1=3: = ℕ (ℕ.+ 1 1) 3): False
{
	2≠3 1+1=3
}
